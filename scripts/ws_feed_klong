#!/usr/bin/python3

import argparse
import asyncio
# import importlib.util
import logging
import os

from klongpy import KlongInterpreter
from websockets import serve

from kdfs.handlers.klong import KlongHandler
from kdfs.ws import WSClient, WSServer


async def main(ws_uri, ws_auth_token, ws_patterns, server_bind, server_port, klong, *args, **kwargs):
    # Start the server
    server = WSServer()
    server_task = serve(server.handle_client, server_bind, server_port)
    logging.info("Server running...")

    # Start the client
    client = WSClient(ws_uri, ws_auth_token, ws_patterns)
    client_task = asyncio.create_task(client.run())
    logging.info("Client running...")

    # Start the message forwarding task
    rl_handler = KlongHandler(server.connected_clients, client.message_queue, klong, *args, **kwargs)
    rl_task = asyncio.create_task(rl_handler.run())
    logging.info("Handler task running...")

    # Wait for all tasks to finish
    await asyncio.gather(server_task, client_task, rl_task)


def exec_server_cmd(args):
    logging.info(f"Opening connection to {args.bind} port {args.port}")

    klong = KlongInterpreter()
    klong(f'.l("{args.kg}")')

    asyncio.run(main(args.uri, "", "AM.*", args.bind, args.port, klong))


parser = argparse.ArgumentParser(description='KlongPy DataFrame Service command')
parser.add_argument('kg', type=str, help='specify Klong message handler file')
parser.add_argument('--log', type=str, help='specify alternate logging level (default: WARN)', default="WARN")
parser.add_argument('--uri', type=str, help='specify alternate ws uri (default: feed)', default="ws://127.0.0.1:5000")
parser.add_argument('--port', type=int, help='specify alternate port (default: 5000)', default=5000)
parser.add_argument('--bind', type=str, help='specify alternate bind address (default: all interfaces)', default="0.0.0.0")
parser.add_argument('--dir', type=str, help='specify alternate directory (default: current directory)', default=os.getcwd())
parser.add_argument('--memory', type=int, help='specify alternate max memory usage (default: 1GB)', default=2**30)

args = parser.parse_args()

log_level = getattr(logging, args.log.upper(), None)
if not isinstance(log_level, int):
    raise ValueError('Invalid log level: %s' % args.log)
logging.basicConfig(level=log_level)

exec_server_cmd(args)

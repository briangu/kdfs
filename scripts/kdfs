#!/usr/bin/python3

import argparse
import os
import shlex
import sys

import simdjson as json
from colorama import Fore, init
from dfs.df_cache import PandasDataFrameCache
from dfs.df_client import *
from dfs.helpers import *

from kdfs.server import CommandHandler, KdfsServer


def exec_server_cmd(args):
    cache = PandasDataFrameCache(max_memory=args.memory, root_path=args.dir)
    with KdfsServer(cache, (args.bind, args.port), CommandHandler) as server:
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            sys.exit(0)



def exec_stats_cmd(pool, level=0):
    with pool.get_connection() as c:
        stats = c.get_stats(level=level)
    return json.dumps(stats, indent=2)


commands = {
    "stats": exec_stats_cmd,
}


class UnknownCommandError(Exception):
    pass


def exec_cmd(pool, cmd_arr):
    cmd = commands.get(cmd_arr[0])
    if cmd is None:
        raise UnknownCommandError(f"Available commands: {list(commands.keys())}")
    return cmd(pool, *cmd_arr[1:])


# https://dev.to/amal/building-the-python-repl-3468
def exec_repl_cmd(args):
    success = lambda input: f"{Fore.GREEN}{input}"
    failure = lambda input: f"{Fore.RED}{input}"

    init(autoreset=True)

    print()
    print(f"{Fore.GREEN}Welcome to KDFS REPL")
    print(f"{Fore.BLUE}author: Brian Guarraci")
    print(f"{Fore.BLUE}repo  : https://github.com/briangu/kdfs")
    print(f"{Fore.YELLOW}crtl-c to quit")
    print()

    try:
        with DataFrameConnectionPool(args.host, args.port, max_connections=args.max_connections) as pool:
            while True:
                try:
                    p = input("?> ")
                    if len(p) == 0:
                        continue
                    cmd_arr = shlex.split(p)
                    if len(cmd_arr) == 0:
                        continue
                    if cmd_arr[0] == 'exit':
                        break
                    r = exec_cmd(pool, cmd_arr)
                    print(success(r))
                except Exception as e:
                    print(failure(f"Error: {e.args}"))
    except KeyboardInterrupt:
        print("\nExiting...")


parser = argparse.ArgumentParser(description='Run DataFrame Service command')
parser.add_argument('--log', type=str, help='specify alternate logging level (default: WARN)', default="WARN")

subparsers = parser.add_subparsers(help='sub-command help')
sp = subparsers.add_parser('repl', help='DFS REPL')
sp.add_argument('--host', type=str, help='specify alternate host address (default: 127.0.0.1)', default="127.0.0.1")
sp.add_argument('--port', type=int, help='specify alternate port (default: 8000)', default=8000)
sp.add_argument('--max_connections', type=int, help='specify alternate source data directory (default: 8)', default=None)
sp.set_defaults(func=exec_repl_cmd)

sp = subparsers.add_parser('server', help='Run KDFS Server')
sp.add_argument('--port', type=int, help='specify alternate port (default: 8000)', default=8000)
sp.add_argument('--bind', type=str, help='specify alternate bind address (default: all interfaces)', default="0.0.0.0")
sp.add_argument('--dir', type=str, help='specify alternate directory (default: current directory)', default=os.getcwd())
sp.add_argument('--memory', type=int, help='specify alternate max memory usage (default: 1GB)', default=2**30)
sp.set_defaults(func=exec_server_cmd)

args = parser.parse_args()

log_level = getattr(logging, args.log.upper(), None)
if not isinstance(log_level, int):
    raise ValueError('Invalid log level: %s' % args.log)
logging.basicConfig(level=log_level)

args.func(args)
